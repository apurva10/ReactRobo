{"version":3,"sources":["components/Robo.js","components/RoboList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Robo","name","roboImg","emailId","className","alt","src","RoboList","roboData","map","val","index","key","email","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChanged","event","searchfield","target","value","fetch","then","response","json","users","filteredRobos","filter","robot","toLowerCase","includes","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bd3e4038.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Robo = ({name, roboImg, emailId}) => {\r\n\treturn(\r\n\t<div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robo1' src={roboImg}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<h3>{emailId}</h3>\r\n\t\t</div>\r\n\t</div>\r\n\t);\r\n}\r\n\r\nexport default Robo;","import React from 'react'\r\nimport Robo from './Robo';\r\n\r\nconst RoboList = ({roboData}) =>{\r\n\t// if(true)\r\n\t// {\r\n\t// \treturn new Error('GOT IT');\r\n\t// }\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\troboData.map ((val, index) =>{\r\n\t\t\treturn(\r\n\t\t\t\t<Robo key={index} name={roboData[index].name} \r\n\t\t\t\t\troboImg={`https://robohash.org/${index}?size=200x200`}\r\n\t\t\t\t\temailId={roboData[index].email}/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default RoboList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' \r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='Search Robo' \r\n\t\t\tonChange={searchChange}/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '450px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\r\n\t\tthis.state = {\r\n\t\t\thasError : false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tif(error)\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender(){\r\n\t\tif(this.state.hasError)\r\n\t\t{\r\n\t\t\treturn (<h1> We got error </h1>)\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react';\r\nimport RoboList from '../components/RoboList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tsearchfield : '',\r\n\t\t\troboData : []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({roboData : users}))\r\n\t}\r\n\r\n\tonSearchChanged = (event) =>{\r\n\t\tthis.setState({searchfield : event.target.value})\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst filteredRobos = this.state.roboData.filter(robot=>{\r\n\t\t\treturn (robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase()))\r\n\t\t\t})\r\n\r\n\t\tif(this.state.roboData.length === 0)\r\n\t\t{\r\n\t\t\treturn(<h1>Loading...</h1>)\r\n\t\t}\r\n\t\telse{\t\t\t\r\n\t\t\treturn(\r\n\t\t\t\t<div className= 'tc'>\t\t\t\t\r\n\t\t\t\t<h1 className='f2'> Robofriends </h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChanged}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<RoboList roboData={filteredRobos}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t    );\r\n\t\t\t}\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <App/>\r\n  </React.StrictMode>, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}